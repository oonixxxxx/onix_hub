from aiogram import F, Router

from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from basic_text import main_page_text, contact_text
from app.other.buttons import Buttons
from app.other.functions import return_anketa

class Reg(StatesGroup):
    name = State()
    number = State()
    adress = State()
    articul = State()

#CONSTANS:
name = ''
adress = ''
articul = ''

router = Router()

@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(f"Hello! –Ø –±–æ—Ç –¥–ª–ª—è –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ \n —á—Ç–æ –±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏ '–ö–æ—Ä–∑–∏–Ω–∞ üõí'", 
                         reply_markup=Buttons.menu_button)

@router.message(F.text == '–í –º–µ–Ω—éüßëüèø‚ÄçüíªüóÇ')
async def get_menu(message: Message):
    await message.answer(str(main_page_text), reply_markup=Buttons.menu_button)

@router.message(F.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å üìÉ‚úèÔ∏è')
async def getcatalog(message: Message):
    await message.answer(str(main_page_text), reply_markup=Buttons.about_us, one_time_keyboard=True)

@router.message(F.text == '–ö–æ—Ä–∑–∏–Ω–∞ üõí')
async def get_busket(message: Message):
    await message.answer('–í—ã–±–∏—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö, –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤, –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è –∏ –∞—Ä—Ç–∏–∫–ª–µ–π –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É https://vk.******',reply_markup=Buttons.busket_button)

@router.message(F.text == '–ö–æ–Ω—Ç–∞–∫—Ç üì∞')
async def get_contact(message: Message):
    await message.answer(str(contact_text), reply_markup=Buttons.bool_button)

@router.message(F.text == '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µüí∞üí≥')
async def go_to_pay(message: Message):
    await message.answer(f'–ö–æ—Ä–∑–∏–Ω–∞:')
    await message.answer('–û–±—â–∞—é —Å—É–º–º–∞: "finaly_prize"')
    await message.answer('–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞—Ü–Ω–∏—Ü—É —Å –æ–ø–ª–∞—Ç–æ–π')
    await message.answer('–î–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø–∏—à–∏—Ç–µ "/reg"', reply_markup=Buttons.go_to_pay_button)

@router.message(F.text == '–î–∞, —ç—Ç–æ –º–æ–∏ –¥–∞–Ω–Ω—ã–µ‚úÖ')
async def verification_true(message: Message):
    await message.answer(str(return_anketa(name, adress)))
    await message.answer('–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –¥–∞–Ω–Ω–æ–µ —Å–æ–±—â–µ–Ω–∏–µ —Å —á–µ–∫–æ–º –æ–ø–ª–∞—Ç—ã –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @bot_shop_example', reply_markup=Buttons.bool_button)

@router.message(F.text == '–ù–µ—Ç, —è —Ö–æ—á—É –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –∏—Ö‚ùå')
async def not_true_verification(message: Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ "/reg", —á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ', reply_markup=Buttons.bool_button)


'''
docstring
–§—É–Ω–∫—Ü–∏ —è –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ '/reg' –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞–µ—Ä–µ–º–µ–Ω–Ω—ã–µ adress, name –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Ö –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
'''
@router.message(Command('reg'))
async def reg_one(message: Message, state: FSMContext):
    await state.set_state(Reg.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: ', reply_markup=Buttons.bool_button)

@router.message(Reg.name)
async def reg_second(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Reg.number)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏:')

@router.message(Reg.number)
async def second_three(message: Message, state: FSMContext):
    
    global name
    global adress
    
    await state.update_data(number=message.text)
    await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
    data = await state.get_data() #{'name': 'tag', 'number': 'comment'}
    name = data['name']
    adress = data['number']
    await message.answer(f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ: \n–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞,–∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å: {name}, –≤–∞—à –Ω–æ–º–µ—Ä –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {adress}', reply_markup=Buttons.verifcation)